/* fcs12.c
 * An implementation to provide 12 bit polynomial Frame Check Sequences
 * for customer IDs.  These are assumed to be 12 characters long,
 * consisting of 10 numbers followed by 2 letters.
 *
 * To get around the problem of big and little Endian machines, I
 * just implement the whole thing using byte arrays.  12-bit patterns
 * are represented using 2 chars instead of 1 short.
 *
 * Future Note:  To enable 4-hexdigit checksums, the polynomial
 * CRC-16: x^16 + x^15 + x^2 + 1 can be used.  Represent this as
 * 3 bytes, {01, 10, 05} hexadecimal.  CRC-CCITT can also be used:
 * x^16 + x^12 + x^5 + 1.
 * 
 * Anand V Raman 18 Jan 1999 (A.Raman@massey.ac.nz)
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include "fcs12.h"

/* Returns the nth bit of string s
 */
#define getBit(s,n) (((s)[(n)/8] >> (7-(n)%8)) & 0x01)

/* Find a 12 bit polynomial CRC, append it as three hex digits to the
 * end of the ICP and return the resulting 15 char Unique ID.  The
 * polynomial to use is: CRC-12 (x^12 + x^11 + x^3 + x^2 + x + 1)
 * represented by the bit pattern 00011000 00001111
 *
 * Input:  char *icp as arg1.
 * Returns: char *uniqID as pointer to internal static array.
 */
char *frame_crc12(char *icp)
{
   static int rstuff(unsigned char *, int);
   static char uniqID[1024];
   unsigned char d[2] = {0x18, 0x0F}; /* Polynomial */
   unsigned char r[2] = {0,0};	      /* Register */
   int i, len;
   
   len = strlen(icp);

   /* Make sure the two letters in the ICP are uppercase and that
    * there are 12 empty bits following it.
    */
   if (len > 0)
      icp[len-1] = toupper(icp[len-1]);
   if (len > 1)
      icp[len-2] = toupper(icp[len-2]);
   icp[len] = icp[len+1] = 0;
	      
   for (i = 0; i < 8*len+FCSSIZE; i++) {
      rstuff(&r[0], rstuff(&r[1], getBit(icp, i)));
      if (r[0] & 0x10) {
	 r[0] ^= d[0];
	 r[1] ^= d[1];
      }
   }
   sprintf(uniqID, "%s%X%02X", icp, r[0], r[1]);
   return uniqID;
}

/* Reentrant version of above.  Result is stored in uniqID
 * which is supplied by the caller.
 *
 * Input:  char icp[] as arg1.
 * Returns: char uniqID[] as pointer to user supplied argument
 */
char *frame_crc12_r(char *icp, char *uniqID, int idLen)
{
   static int rstuff(unsigned char *, int);
   unsigned char d[2] = {0x18, 0x0F}; /* Polynomial */
   unsigned char r[2] = {0,0};	      /* Register */
   int i, icpLen;
   
   icpLen = strlen(icp);
   if (icpLen+3 > idLen)	/* Not enough room for result */
      return uniqID;

   /* Make sure the two letters in the ICP are uppercase and that
    * there are 12 empty bits following it.
    */
   if (icpLen > 0)
      icp[icpLen-1] = toupper(icp[icpLen-1]);
   if (icpLen > 1)
      icp[icpLen-2] = toupper(icp[icpLen-2]);
   icp[icpLen] = icp[icpLen+1] = 0;
	      
   for (i = 0; i < 8*icpLen+FCSSIZE; i++) {
      rstuff(&r[0], rstuff(&r[1], getBit(icp, i)));
      if (r[0] & 0x10) {
	 r[0] ^= d[0];
	 r[1] ^= d[1];
      }
   }
   sprintf(uniqID, "%s%X%02X", icp, r[0], r[1]);
   return uniqID;
}

/* The uniqID parameter is a 15 character string in which the first 12
 * characters are the ICP and last three characters are the FCS.  The
 * function returns true (1) if the ICP agrees with the FCS and false
 * (0) if not.
 *
 * Input: 15 char uniqID as arg1 (10 numbers, 2 letters, 3 hexdigit FCS)
 * Returns: 1 if FCS is valid for ICP, 0 if not.
 *
 * We use the re-entrant version of frame_crc12 and so don't have to
 * worry about thread-safeness.
 */
int check_crc12(char *uniqID)
{
   char icp[BUFSIZ], buf[BUFSIZ];
   int len = strlen(uniqID);

   if (len < 3)
      return 0;  		/* Assume very short ID's are invalid */
   
   strcpy(icp, uniqID);
   icp[len-3] = 0;
   (void) frame_crc12_r(icp, buf, BUFSIZ);
   if (!stricmp(uniqID, buf))
      return 1;
   return 0;
}

/* Stuffs i into the rightmost bit of *c shifting out the leftmost.
 * Returns the bit shifted out.
 */
static int rstuff(unsigned char *c, int i) {
   int b = (*c >> 7) & 0x01;          /* Store leftmost bit */
   *c = (*c << 1) | (i? 0x01 : 0);    /* Shift in i from right */
   return b;
}

